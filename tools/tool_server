#!/usr/bin/env node

// at the moment you have to run this from the dom.js directory, not the tools directory.
// less hardcoded paths would be good.


var spawn = require('child_process').spawn;
var http = require('http');
var vm = require('vm');
var fs = require('fs');


function CometQueue() {
    this.outstanding_requests = [];
}
CometQueue.prototype.add = function(request) {
    this.outstanding_requests.push(request);
}
CometQueue.prototype.notify = function(result) {
    var requests = this.outstanding_requests;
    this.outstanding_requests = [];
    for (var i = 0; i < requests.length; i++) {
        var response = requests[i];
        response.writeHead(200, {'Content-Type': 'application/json'});
        response.end(result);
    }
}


////////////////////////////////////////////////////////////////////


function ProfilageGenerator(notify_queue) {
    this.notify_queue = notify_queue;
    this.profilage_data = null;
    this.lock = false;
    this.generate();
    var self = this;

    fs.watchFile('dom.js', function(curr, prev) { self.fileNotification(curr, prev) });
}
ProfilageGenerator.prototype.fileNotification = function (curr, prev) {
    if (curr.mtime.toUTCString() != prev.mtime.toUTCString()) {
        console.log(curr.mtime.toUTCString(), 'dom.js changed');
        this.generate();
    }
}
ProfilageGenerator.prototype.generate = function () {
    var self = this;
    if (!this.lock) {
        this.lock = true;
        var rm = spawn('rm', ['-f', 'disassembly.out'])
        rm.on('exit', function(code) {

            var dissassembler = spawn('jsd', ['-D', '../../disassembly.out', 'core.js'], {cwd: 'tests/jsdom'});
            dissassembler.stdout.on('data', function (data) {
                console.log('stdout: ' + data);
            });
            dissassembler.stderr.on('data', function (data) {
                console.log('stderr: ' + data);
            });
            dissassembler.on('exit', function (code) {
                console.log('child process exited with code ' + code);
                var parser = spawn('tools/profilage2', ['-j', 'disassembly.out']);
                var parts_to_parse = '';
                parser.stdout.on('data', function (data) {
                    parts_to_parse += data;
                });
                parser.on('exit', function (code) {
                    self.lock = false;
                    console.log('coverage and profiler data updated.');
                    // Strip off the EOF.
                    self.profilage_data = parts_to_parse.substring(0, parts_to_parse.length - 1);
                    self.last_modified = new Date().toUTCString();
                    self.notify_queue.notify(self.profilage_data);
                });
            });
        });
    }
}
ProfilageGenerator.prototype.get = function () {
    return this.profilage_data;
}


////////////////////////////////////////////////////////////////////


var statistics_notification_queue = new CometQueue();
var profilage = new ProfilageGenerator(statistics_notification_queue);


function index_html() {
    // XXX don't sync read in a webserver.
    return fs.readFileSync('index.html', 'utf8');
}


http.createServer(function (req, res) {
    if (req.url == '/') {
        res.writeHead(200, {'Content-Type': 'text/html'});
        res.end(index_html());
    } else if (req.url.substring(0, 14) == '/coverage.json') {
        var profilage_data = profilage.get();
        if (profilage_data) {
            res.writeHead(200, {'Content-Type': 'application/json', 'Last-Modified': profilage.last_modified});
            res.end(profilage_data);
        } else {
            statistics_notification_queue.add(res);
        }
    } else {
        res.writeHead(404, {'Content-Type': 'text/html'});
        res.end('Not Found');
    }
}).listen(1337, "127.0.0.1");
console.log('Server running at http://127.0.0.1:1337/');

